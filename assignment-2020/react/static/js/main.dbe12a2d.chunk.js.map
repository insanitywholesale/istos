{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalUniqueCounters","totalCounters","className","href","Counter","classes","this","props","counter","value","onClick","onIncrement","getBadgeClasses","formatCount","onDelete","id","Component","Counters","counters","onReset","map","key","initialState","App","state","handleReset","length","c","setState","handleDelete","counterId","filter","handleIncrement","i","indexOf","Fragment","reduce","total","amount","Boolean","window","location","hostname","match","rootBoi","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbe12a2d.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({ totalUniqueCounters, totalCounters }) => {\n\t{/*\n\tdoing object destructuring in the parameters passed\n\tso no need to write this.props.totalCounters\n\t*/}\n\treturn (\n\t\t<nav className=\"navbar navbar-light bg-light\">\n\t\t<span>\n\t\t  <a className=\"navbar-brand\" href=\"#navlink\">\n\t\t\tTotal of Unique Items: {/* navbar label*/}\n\t\t\t<span className=\"badge badge-pill badge-secondary\">\n\t\t\t\t{totalUniqueCounters}\n\t\t\t</span>\n\t\t</a>\n\t \t<a className=\"navbar-brand\" href=\"#navlink\">\n\t\t\tTotal Items: {/* navbar label*/}\n\t\t\t<span className=\"badge badge-pill badge-secondary\">\n\t\t\t\t{totalCounters}\n\t\t\t</span>\n\t\t</a>\n\t\t</span>\n\t\t</nav>\n\t);\n\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n\tgetBadgeClasses() {\n\t\tlet classes = \"badge m-2 badge-\";\n\t\tclasses += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\n\t\t{/*\n\t\tnice shortcut that resolves to badge-warning or badge-primary\n\t\t*/}\n\t\treturn classes;\n\t}\n\n\tformatCount() {\n\t\tconst { value } = this.props.counter;\n\t\treturn value === 0 ? 'Zero' : value;\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm\">\n\t\t\t\t\tIncrement {/*button label*/}\n\t\t\t\t</button>\n\t\t\t\t<span className={this.getBadgeClasses()}>\n\t\t\t\t\t{this.formatCount()}\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onDelete(this.props.counter.id)}\n\t\t\t\t\tclassName=\"btn btn-danger btn-sm m-2\">\n\t\t\t\t\t\tDelete {/*button label*/}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n\n\trender () {\n\t\tconst {counters, onIncrement, onDelete, onReset} = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={onReset}\n\t\t\t\t\tclassName=\"btn btn-primary btn-sm m-2\">\n\t\t\t\t\t\tReset {/*button label*/}\n\t\t\t\t</button>\n\t\t\t\t{counters.map(counter => \n\t\t\t\t\t<Counter\n\t\t\t\t\t\tcounter={counter}\n\t\t\t\t\t\tkey={counter.id}\n\t\t\t\t\t\tonIncrement={onIncrement}\n\t\t\t\t\t\tonDelete={onDelete}\n\t\t\t\t\t/>)\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default Counters;\n","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\nimport './App.css';\n\nconst initialState = {\n\tcounters: [\n\t\t{id : 1, value: 0},\n\t\t{id : 2, value: 0},\n\t\t{id : 3, value: 0},\n\t\t{id : 4, value: 0},\n\t\t{id : 5, value: 0},\n\t]\n};\n\nclass App extends Component {\n\tstate = {};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = initialState;\n\t}\n\n\thandleReset = () => {\n\t\tif(this.state.counters.length > 0) { //if counters exist, zero them\n\t\t\tconst counters = this.state.counters.map(c => {c.value = 0; return c; } );\n\t\t\tthis.setState({ counters });\n\t\t}\n\t\telse { //otherwise remake them\n\t\t\tthis.setState(initialState);\n\t\t}\n\t}\n\n\thandleDelete = (counterId) => {\n\t\tconst counters = this.state.counters.filter(c => c.id !== counterId);\n\t\tthis.setState({ counters });\n\t}\n\n\thandleIncrement = (counter) => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst i = counters.indexOf(counter);\n\t\tcounters[i] = {...counter};\n\t\tcounters[i].value++;\n\t\tthis.setState({ counters });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t<NavBar\n\t\t\t\ttotalUniqueCounters={this.state.counters.filter(c => c.value > 0).length}\n\t\t\t\ttotalCounters={this.state.counters.map(c => c.value).reduce((total, amount) => total + amount, 0)}/> {/*get sum of non-zero value counters*/}\n\t\t\t\t<main className=\"container\">\n\t\t\t\t\t<Counters\n\t\t\t\t\t\tcounters={this.state.counters}\n\t\t\t\t\t\tonIncrement={this.handleIncrement}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t\tonReset={this.handleReset}\n\t\t\t\t\t/>\n\t\t\t\t</main>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css'; //addition\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar rootBoi = document.getElementById('root');\nReactDOM.render(<App />, rootBoi);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}